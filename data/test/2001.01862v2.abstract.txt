“What is an algorithm?” is a fundamental question of computer science.
Gurevich’s behavioural theory of sequential algorithms (aka the
sequential ASM thesis) gives a partial answer by defining
(non-deterministic) sequential algorithms axiomatically, without
referring to a particular machine model or programming language, and
showing that they are captured by (non-deterministic) sequential
Abstract State Machines (nd-seq ASMs). Moschovakis pointed out that
recursive algorithms such as mergesort are not covered by this theory.
In this article we propose an axiomatic definition of the notion of
sequential recursive algorithm which extends Gurevich’s axioms for
sequential algorithms by a Recursion Postulate and allows us to prove
that sequential recursive algorithms are captured by recursive Abstract
State Machines , an extension of nd-seq ASMs by a CALL rule. Applying
this recursive ASM thesis yields a characterization of sequential
recursive algorithms as finitely composed concurrent algorithms all of
whose concurrent runs are partial-order runs.

\hexnumber@ \symitalic

41 \hexnumber@ \symitalic 61
