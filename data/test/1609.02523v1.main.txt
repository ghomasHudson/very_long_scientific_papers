##### Contents

-    1 Introduction
    -    1.1 The @xmath -adic case
    -    1.2 The Casselman-Jacquet functor
    -    1.3 My approach to the Casselman-Jacquet functor
    -    1.4 D-module description
    -    1.5 The main result - @xmath applied to principal series
-    2 Setting and Notations
    -    2.1 Setting
    -    2.2 Notations
-    3 Summary
-    4 Averaging and relaxing functors
    -    4.1 Motivation
    -    4.2 The functors @xmath and @xmath
    -    4.3 The functors @xmath and @xmath
    -    4.4 Some commutation properties
-    5 The Casselman-Jacquet and Bernstein functors
    -    5.1 Definition
    -    5.2 Finiteness properties
    -    5.3 Comparison with the traditional Casselman-Jacquet functor
-    6 The derived geometric Bernstein functor
    -    6.1 Equivariant derived categories
    -    6.2 Definition
    -    6.3 Commutation properties
    -    6.4 The category @xmath
    -    6.5 An acyclicity property
-    7 The functor @xmath and its property
    -    7.1 The functor @xmath
    -    7.2 Acycilicity properties
-    8 The main statement
    -    8.1 Principal series modules
    -    8.2 Twisted Verma modules
    -    8.3 Main statement
-    9 Some questions and conjectures
    -    9.1 Regarding @xmath
    -    9.2 Regarding @xmath
    -    9.3 Regarding the main statement
-    A @xmath -algebras and some functors
    -    A.1 @xmath -algebras
    -    A.2 Modules over @xmath -algebras
    -    A.3 The functors @xmath
    -    A.4 The functors @xmath
-    B Filtrations and Stratifications
    -    B.1 Filtrations on objects
    -    B.2 Stratifications on categories
-    C Sketch of proof of part @xmath of theorem 8.3.1

## Chapter 1 Introduction

In this thesis, we study the Casselman-Jacquet functor. We propose a new
technical approach to defining this functor, and study some of its
properties.

For concreteness let us, in this introduction, set: @xmath , @xmath -
the orthogonal matrices, @xmath - the upper triangular matrices, @xmath
(resp. @xmath ) - the upper triangular (resp. lower triangular)
unipotent matrices, @xmath - the diagonal matrices (also considered as
@xmath ), @xmath . By @xmath we denote the Weyl group of @xmath . By
Gothic letters we denote the corresponding complexified Lie algebras.

Let us note that in the thesis itself, after the introduction, we will
pass to a purely algebraic setup (see section 2.1 ).

### 1.1 The @xmath-adic case

In @xmath -adic representation theory, that is, when we replace the
above real group with @xmath , where @xmath is a local non-archimedian
field (and all the subgroups are defined as above), we are interested in
the category of smooth representations of @xmath . One of the main tools
to study it is by using parabolic induction functors. These induction
functors have left adjoints, the Jacquet functors. So, we have the
Jacquet functor from the category of smooth @xmath -representations to
the category of smooth @xmath -representations. This functor is defined
by taking @xmath -coinvariants, and intuitively speaking measures ”how
much a representation has to do with representations parabolically
induced from @xmath ”. One of the main properties of the Jacquet functor
is that it is exact.

### 1.2 The Casselman-Jacquet functor

In our case of interest, the case of real groups and their
representations, the category of interest, from an algebraic point of
view, is the category @xmath of Harish-Chandra @xmath -modules ¹ ¹ 1
”Harish-Chandra” is a finiteness condition; It means that the module is
finitely-generated as a @xmath -module and locally finite as a @xmath
-module. .

The first guess at defining a ”Jacquet functor” would be to consider the
functor

  -- -------- --
     @xmath   
  -- -------- --

given by

  -- -------- --
     @xmath   
  -- -------- --

However, this functor has the big drawback of being non-exact.

Casselman corrects the naive functor above, by considering a completion;
He defines:

  -- -------- --
     @xmath   
  -- -------- --

the @xmath -adic completion. To avoid completion (the above completed
object is not a Harish-Chandra module in some usual sense, for example),
we may consider a dual functor @xmath ; @xmath is the submodule of
@xmath , consisting of vectors killed by high power of @xmath :

  -- -------- --
     @xmath   
  -- -------- --

The very surprising feature, that contrasts with the @xmath -adic
situation, is that @xmath carries naturally not merely an @xmath -module
structure, but in fact a @xmath -module structure. Casselman shows that
@xmath is an exact contravariant functor

  -- -------- --
     @xmath   
  -- -------- --

(see [ C2 ] ).

The exactness of @xmath , which is equivalent to the exactness of @xmath
, is shown by a variant of the Artin-Rees lemma; See section 5.3.1 for
more details.

Let us mention here that one sees in the literature a third
”normalization” of the Casselman-Jacuqet functor, let us call it @xmath
. @xmath is defined as the subspace of @xmath -finite vectors in @xmath
(see, for example, [ ENV ] ).

### 1.3 My approach to the Casselman-Jacquet functor

I define the Casselman-Jacquet functor slightly differently than the
above, and denote it by

  -- -------- --
     @xmath   
  -- -------- --

Namely, for a Harish-Chandra @xmath -module @xmath , write @xmath for
the @xmath -type decomposition, and define @xmath as the subspace of
vectors in @xmath which are @xmath -finite and killed by high power of
@xmath , multiplied by some ”normalizing” one-dimensional vector space
(see 5 ).

This functor is easily related to @xmath (see proposition 5.3.1 ).

An important feature of @xmath , which (at least as far as I know) is
not clear when one considers the previous definitions of the
Casselman-Jacquet functor, is that @xmath admits a left adjoint, the
so-called Bernstein functor

  -- -------- --
     @xmath   
  -- -------- --

(see chapter 5 ).

I conjecture (see conjecture 9.1.6 ) that @xmath is canonically
isomorphic to @xmath (perhaps up to tensoring by a power of a
one-dimensional vector space; see conjecture 9.1.6 ). This conjecture is
equivalent to ”duality” for the Casselman-Jacquet functor (see
conjecture 9.1.4 ). In the case of real groups (as in this
introduction), it seems that this conjecture is understood to some
extent using analytic tools (see the last paragraph in Section 12 of [
C2 ] ). But an algebraic understanding (formally, that would apply in
the purely algebraic setting of section 2.1 ) seems to not exist yet.

Another interseting conjecture regarding @xmath is conjecture 9.1.2 .
Namely, in my approach we can consider @xmath from the category of all
@xmath -modules to the category of all @xmath -modules (not necessarily
Harish-Chandra). The conjecture is that @xmath is exact on the
subcategory of modules which are finitely-generated over @xmath .

### 1.4 D-module description

Under the Beilinson-Bernstein correspondence, one can try to translate
notions involving Harish-Chandra modules above to notions involving
equivariant @xmath -modules on the flag variety. The functor @xmath
admits a @xmath -module description, via nearby cycles (see [ ENV ] ).

In my current approach, however, I realize geometrically, instead of
@xmath , its left adjoint @xmath , the Bernstein functor. So, we
consider the ”geometric Bernstein functor”

  -- -------- --
     @xmath   
  -- -------- --

(here @xmath is a sheaf of twisted differential operators on the complex
flag variety, and @xmath is the category of @xmath -equivariant coherent
@xmath -modules). The functor @xmath admits a right adjoint

  -- -------- --
     @xmath   
  -- -------- --

The conjecture that @xmath is isomorphic to @xmath is more or less
equivalent to conjecture 9.2.2 , that @xmath is isomorphic to the
geometric Jacquet functor of [ ENV ] .

### 1.5 The main result - @xmath applied to principal series

The main result of this thesis is concerned with the structure of the
@xmath -module @xmath that one obtains by applying @xmath to the @xmath
-module @xmath corresponding to a principal series representation (i.e.,
parabolic induction from @xmath ).

Casselman observes that @xmath admits a ”Bruhat” filtration ² ² 2 a
filtration whose subquotients are indexed by Bruhat cells (i.e. orbits
of @xmath ) in the real flag variety @xmath , which in turn bijectively
correspond to elements of the Weyl group @xmath . . This he does
analytically, as the so-called automatic continuity allows to replace
@xmath by a space of continuous functionals on the actual smooth
principal series representation. The principal series representation
consists of smooth sections of a line bundle on @xmath , and its
Casselman-Jacquet module thus consists of distributional sections of a
line bundle on @xmath , killed by high power of @xmath - one can then
consider the filtration on this space of distributional sections by
support on closures of Bruhat cells (see [ C2 , section 14] ).

The question we ask is how to understand this Bruhat filtration purely
algebraically. I provide an answer. Translating the situation to
equivariant @xmath -modules (via Beilinson-Bernstein correspondence), I
want to ask, what is the property of the @xmath -module corresponding to
@xmath , that guarantees that it has a canonical Bruhat filtration. I
then notice that an @xmath -equivariant @xmath -module @xmath always has
a derived Bruhat filtration, whose @xmath -th subquotient is @xmath
(Here @xmath is an element in the Weyl group, and @xmath is the
corresponding @xmath -orbit in the complex flag variety). In the case
when @xmath are all acyclic, i.e. concentrated in cohomological degree
@xmath , this derived filtration becomes a usual filtration in the
abelian category. We call objects @xmath with this property (that @xmath
is acyclic for every @xmath ) costandard-filtered. Another
characterization of such objects is that they admit a filtration (in the
abelian category) by costandard objects - those are objects of the form
@xmath with irreducible @xmath .

###### Theorem (Theorem 8.3.1).

The object in @xmath which one obtains when applying the geometric
Casselman-Jacquet functor @xmath to an object in @xmath which
corresponds to a principal series Harish-Chandra module via the
Beilinson-Bernstein correspondence, is costandard-filtered. In
particular, it admits a canonical Bruhat filtration. For @xmath , the
@xmath -th subquotient of this Bruhat filtration is a suitable
costandard object.

###### Corollary (Corollary 8.3.3).

The object in @xmath that one obtains when applying the
Casselman-Jacquet functor @xmath to a principal series Harish-Chandra
module in @xmath , admits a canonical Bruhat filtration. For @xmath ,
the @xmath -th subquotient of this Bruhat filtration is a suitable
twisted Verma module.

Twisted Verma modules are a version, in @xmath -flavours, of Verma
modules; They have the same composition series, but are ”glued” from the
irreducible constituents differently. For example, the twisted Verma
module corresponding to @xmath is just the Verma module, while the
twisted Verma module corresponding to @xmath (the longest Weyl element)
is the dual Verma module. See section 8.2 and [ AL ] .

A better statement would be one that identifies the subquotients more
”canonically” and ”functorially”. See conjectures 9.3.1 and 9.3.2 .

Let me, finally, note the similarity of the above corollary to the
geometric lemma from the representation theory of @xmath -adic groups
(see [ B , Ch. III, 1.2] ).

## Chapter 2 Setting and Notations

In this chapter we fix the setting and notations for the thesis.

As opposed to the introduction, we will work in a completely algebraic
setup (see example 2.1.2 for the connection to the setting of the
introduction). We fix a field @xmath , algebraically closed of
characteristic @xmath . All vector spaces, tensor products, algebraic
varieties etc. will be over @xmath . All algebraic varieties will be
assumed quasi-projective, so that to be on the safe side with things
like cohomological dimension of categories of @xmath -modules.

### 2.1 Setting

We fix the following data:

-   @xmath - a connected reductive algebraic group.

-   @xmath - an involution of @xmath .

-   @xmath - an open subgroup of @xmath .

-   @xmath - a @xmath -split Borel subgroup of @xmath . This means that
    @xmath is opposite to @xmath . We assume furthermore that @xmath for
    all @xmath .

###### Remark 2.1.1.

In the language of real groups, the condition that @xmath is @xmath
-split means that we are in the quasi-split case, while the further
condition that @xmath for all @xmath means that we are in the split
case.

###### Example 2.1.2.

One can take @xmath , @xmath , @xmath - orthogonal matrices, @xmath -
upper triangular matrices. If @xmath , then we can think of @xmath as a
real algebraic group. @xmath is then a maximal compact subgroup in
@xmath , and @xmath is a Borel subgroup defined over @xmath . We thus
obtain the example used in the introduction (just that now, we denote by
@xmath and etc. the complex algebraic groups, not the real points as in
the introduction).

### 2.2 Notations

#### 2.2.1 General notations

Denote by @xmath the unipotent radical of @xmath , and @xmath ( @xmath
is thus a @xmath -split torus - meaning that @xmath for all @xmath ).

Denote @xmath . @xmath is a finite subgroup of @xmath .

By Gothic letters, we denote the Lie algebras of the corresponding
algebraic groups: @xmath etc.

The Weyl group of @xmath will be denoted by @xmath . We identify @xmath
.

”The Cartan” Lie algebra of @xmath will be denoted by @xmath . It is
defined by choosing a Borel subgroup @xmath , and defining @xmath as the
Lie algebra of @xmath . When one chooses a different Borel subgroup
@xmath , an element @xmath satisfying @xmath identifies between @xmath
and @xmath , and this identification does not depend on the choice of
@xmath . In this way, we get a well-defined abelian Lie algebra @xmath -
”the Cartan”.

We can identify @xmath using our Borel @xmath , when it is convenient.
@xmath acts linearly on @xmath - when identifying @xmath and @xmath ,
this is just the adjoint action. Making an affine translation of this
action so that @xmath is the fixed point, instead of @xmath , we obtain
the so-called ”dot-action”.

By @xmath we denote the center of @xmath . characters of @xmath are
called infinitesimal characters. We identify as usual @xmath , where for
the quotient we consider the dot-action. For a weight @xmath , we denote
by @xmath the corresponding infinitesimal character.

#### 2.2.2 Categories of modules

For a closed subgroup @xmath , we denote by @xmath the abelian category
of (strong) ¹ ¹ 1 In this thesis, we always consider strongly
equivariant modules - i.e. the two possible actions of the Lie algebra
of the acting group should coincide. @xmath -modules.

By @xmath we denote the full subcategory of Harish-Chandra modules, i.e.
modules which are finitely generated as @xmath -modules, and locally
finite as @xmath -modules - these two properties together imply that
@xmath acts via a quotient of finite dimension.

Given an infinitesimal character @xmath , we denote by @xmath and @xmath
the full subcategories of objects on which @xmath acts by @xmath .

We denote by @xmath the category of Harish-Chandra @xmath -modules -
those are just the finite-dimensional (strong) @xmath -modules. For
@xmath , we denote by @xmath the full subcategory of modules on which
@xmath acts by @xmath . Under the forgetful functor, @xmath is
equivalent to the category of finite-dimensional algebraic @xmath
-modules.

#### 2.2.3 The flag variety

The flag variety of @xmath will be denoted by @xmath . For @xmath , we
denote by @xmath the corresponding Borel subalgebra, and @xmath . We
denote by @xmath the point corresponding to our Borel subgroup @xmath .

The @xmath -orbits on @xmath are the same as the @xmath -orbits on
@xmath , and are in bijection with @xmath . Namely, to @xmath
corresponds the @xmath -orbit @xmath passing via @xmath . Here, by
@xmath we mean @xmath , where @xmath is any representative of @xmath -
the end result does not depend on this choice of representative. We
denote by @xmath the embedding.

There is a finite number of @xmath -orbits on @xmath , and they are
affine. There is a unique open @xmath -orbit @xmath - that which passes
through @xmath . We denote by @xmath the embedding.

For @xmath , we have the TDO @xmath on @xmath . We use the shifted
convention, so that @xmath , the sheaf of differential operators.

For integral weight @xmath , we have the @xmath -equivariant line bundle
@xmath on @xmath .

#### 2.2.4 Categories of @xmath-modules

For a closed subgroup @xmath , we denote by @xmath the abelian category
of (strongly) ² ² 2 In this thesis, we always consider strongly
equivariant modules - i.e. the two possible actions of the Lie algebra
of the acting group should coincide. @xmath -equivariant @xmath
-modules. By @xmath we denote the full subcategory of those @xmath
-modules which are coherent. If @xmath acts on @xmath with finitely many
orbits, then coherent @xmath -equivariant @xmath -modules are the same
as holonomic @xmath -equivariant @xmath -modules.

For @xmath , the category @xmath of @xmath -equivariant @xmath -modules
on the orbit @xmath is equivalent, via taking the fiber at the point
@xmath , to @xmath . In the same fashion, the category @xmath is
equivalent, via taking the fiber at the point @xmath , to @xmath . We
denote these equivalences by

  -- -------- --
     @xmath   
  -- -------- --

and

  -- -------- --
     @xmath   
  -- -------- --

We have the localization-globalization adjunction

  -- -------- --
     @xmath   
  -- -------- --

which is an equivalence if @xmath is regular antidominant.

#### 2.2.5 @xmath-algebras

See appendix A for the notions we use regarding @xmath -algebras. Our
reference for @xmath -algebras, @xmath ’s, etc. is [ BB ] .

For a @xmath -algebra @xmath on a smooth algebraic variety @xmath , we
denote by @xmath the abelian category of @xmath -modules. If an affine
algebraic group @xmath acts on @xmath and @xmath is @xmath -equivariant,
we denote by @xmath the abelian category of (strongly) ³ ³ 3 In this
thesis, we always consider strongly equivariant modules - i.e. the two
possible actions of the Lie algebra of the acting group should coincide.
@xmath -equivariant @xmath -modules.

Of course, the previous notations @xmath and @xmath are special cases of
this @xmath - the first one when @xmath and @xmath , and the second one
when @xmath and @xmath .

#### 2.2.6 @xmath-Categories

A @xmath -category is a triangulated category @xmath equipped with a
@xmath -structure @xmath . Let us recall that @xmath is an Abelian
category, called the heart of @xmath . The @xmath -category @xmath is
said to be bounded if for every object @xmath there exist @xmath such
that @xmath . An object @xmath is said to be acyclic if @xmath , i.e.
@xmath lies in the heart of the @xmath -structure.

#### 2.2.7 Some other notations

Given a @xmath -equivariant algebra @xmath (such as @xmath ), we denote
by @xmath the result of the action of the element @xmath on the element
@xmath .

Given a @xmath -module @xmath , we say that a vector @xmath is @xmath
-torsion, if @xmath for some @xmath .

For a smooth algebraic variety @xmath , we denote by @xmath the sheaf of
regular functions on @xmath , and @xmath . Also, we denote by @xmath the
sheaf of differential operators on @xmath , and @xmath .

## Chapter 3 Summary

Let us summarize the constructions and propositions of this thesis.

1.  We define a pair of adjoint functors

      -- -------- --
         @xmath   
      -- -------- --

    The functor @xmath is directly related to Casselman’s functor @xmath
    from the introduction - we call it the Casselman-Jacquet functor.
    The functor @xmath is, more or less, Bernstein’s functor (a
    ”projective” analog of Zuckerman’s functor) - and so we call it the
    Bernstein functor (see chapter 5 ).

2.  For a weight @xmath , we define a pair of adjoint functors

      -- -------- --
         @xmath   
      -- -------- --

    Those are the ”geometric” Bernstein and Casselman-Jacquet functors
    (see chapter 5 for @xmath and chapter 7 for @xmath ).

3.  @xmath and @xmath are related by the localization functor @xmath ,
    while @xmath and @xmath are related by the globalization functor
    @xmath ; i.e. the following diagrams naturally @xmath -commute:

      -- -- --
            
      -- -- --

    (see lemma 5.1.4 and lemma 7.1.2 ).

4.  The functors @xmath and @xmath are exact ¹ ¹ 1 Of course, a priori,
    @xmath and @xmath are right exact as left adjoint functors and
    @xmath and @xmath are left exact, as right adjoint functors. (see
    theorem 5.3.2 and claim 7.1.1 ).

5.  The category @xmath admits a formalism of (co)standard objects,
    (co)standard-filtered objects, etc. Also, @xmath , the derived
    category of @xmath -equivariant holonomic @xmath -modules (as in [
    BL ] ), is naturally equivalent to @xmath (see appendix B and
    section 6.4 ).

6.  The left derived functor

      -- -------- --
         @xmath   
      -- -------- --

    sends standard-filtered objects to acyclic objects (i.e. objects
    concentrated in cohomological degree @xmath ). As a consequence, the
    functor

      -- -------- --
         @xmath   
      -- -------- --

    sends injective objects to costandard-filtered objects (see
    propositions 7.2.2 and 7.2.3 ).

7.  The main theorem: For a @xmath -equivariant irreducible smooth
    @xmath -module @xmath on the open @xmath -orbit @xmath , the object
    @xmath is injective. Hence, @xmath is costandard-filtered. As a
    result, @xmath admits a canonical @xmath -filtration - a filtration
    whose subquotients are indexed by the Weyl group @xmath . The
    subquotients are costandard objects (see theorem 8.3.1 ).

8.  Corollary of the main theorem: By passing to global sections in the
    previous paragraph, we obtain that for a principal series module
    @xmath , the module @xmath admits a canonical @xmath -filtration,
    whose subquotients are twisted Verma modules (see corollary 8.3.3 ).

Moreover, in chapter 9 , we make some speculations:

1.  In our setup, the functor @xmath is actually defined on categories
    of ”big” ² ² 2 i.e., dropping the conditions of @xmath -finite
    generation and @xmath -local finiteness. modules

      -- -------- --
         @xmath   
      -- -------- --

    We expect that @xmath preserves finite-generation over @xmath , and
    conjecture that @xmath is exact on the subcategory of modules
    finitely-generated over @xmath .

2.  We conjecture that @xmath commutes, in a certain sense, with
    duality. In the case of real groups, this corresponds to Casselman’s
    canonical pairing, and so presumably understood to some degree by
    analytical means.

3.  We conjecture that @xmath is more or less isomorphic to the functor
    @xmath , which is usually understood as the Jacquet-Casselman
    functor (as in [ ENV ] , for example). This conjecture is equivalent
    to the previous one.

4.  To establish property (6) above, we use the derived geometric
    Bernstein functor

      -- -------- --
         @xmath   
      -- -------- --

    Here, the categories @xmath are the derived categories of
    equivariant @xmath -modules, as in [ BL ] . One might stress that
    this derived functor is the ”correct one” (rather than @xmath ). We
    conjecture that @xmath admits a @xmath -exact right adjoint @xmath
    and, furthermore, that @xmath is more or less the geometric Jacquet
    functor of [ ENV ] .

5.  We expect a more precise formulation of the main theorem, where the
    subquotients are not only determined up to a non-canonical
    isomorphism, but rather identified canonically and functorially
    (perhaps after some small choice). In this formulation, the main
    theorem becomes very similar to the geometric lemma from the
    representation theory of @xmath -adic groups (see [ B , Ch. III,
    1.2] ).

## Chapter 4 Averaging and relaxing functors

In this chapter we discuss the ”averaging” and ”relaxing” functors,
which will serve us when we define the Casselman-Jacquet and Bernstein
functors. The idea is that we want a unified framework for defining the
Bernstein functor on modules, as well as the Bernstein functor on @xmath
-modules.

For the functors between categories of modules over @xmath -algebras
that we use, one should consult appendix A .

We fix the following. @xmath is a smooth algebraic variety, equipped
with an action of an affine algebraic group @xmath . @xmath is a @xmath
-equivariant @xmath -algebra on @xmath , and @xmath is a closed
subgroup. We also assume that @xmath is affine and @xmath is reductive.

### 4.1 Motivation

We would like to define a functor @xmath . For the motivation, naively
replace equivariant @xmath -modules by invariant functions and pretend
that @xmath is finite. If we have an @xmath -invariant function @xmath
on @xmath , we can construct a @xmath -invariant function @xmath on
@xmath by the formula

  -- -------- --
     @xmath   
  -- -------- --

We would like to describe a diagrammatic interpretation.

For a map @xmath we have the operation @xmath which sends a function
@xmath on @xmath to the function on @xmath defined by @xmath . We also
have the operation @xmath which sends a function @xmath on @xmath to the
function on @xmath defined by @xmath . Finally, if @xmath is the
quotient map by a free action of a group @xmath , we have the operation
@xmath which sends an @xmath -invariant function @xmath on @xmath to the
function on @xmath defined by @xmath , where @xmath is any preimage of
@xmath under @xmath .

We consider the diagram

  -- -- --
        
  -- -- --

Here the map @xmath is the projection, @xmath , the map @xmath is the
quotient map on the first factor and the identity on the second factor,
and @xmath is the projection. We then have

  -- -------- --
     @xmath   
  -- -------- --

Notice that @xmath is an isomorphism, so that @xmath is just ”a change
of coordinates”.

### 4.2 The functors @xmath and @xmath

To define our functors, we consider again the diagram from the previous
section:

  -- -- --
        
  -- -- --

where @xmath is the projection, @xmath , the map @xmath is the quotient
map on the first factor and the identity on the second factor, and
@xmath is the projection.

We fix the following equivariant structures on the spaces in the
diagram: on the left @xmath we consider the @xmath -action. On the left
@xmath , we consider the @xmath -action, where @xmath acts by @xmath and
@xmath acts by @xmath . On the right @xmath we consider the @xmath
-action. On @xmath we consider the @xmath -action given by @xmath . On
the right @xmath we consider the @xmath -action, where @xmath acts by
@xmath and @xmath acts by @xmath . Notice that the @xmath -actions on
the two copies of @xmath are interchanged via @xmath .

We also fix the following @xmath -algebras on the spaces in the diagram:
On both copies of @xmath , we consider the @xmath -algebra @xmath . On
the rest of the spaces, we consider the @xmath -algebras gotten from
@xmath by pullback along the vertical maps. Of course, since all our
maps are projection maps, the resulting @xmath -algebras on the two
copies of @xmath are @xmath , and the @xmath -algebra on @xmath is
@xmath . We note that all those @xmath -algebras are suitably
equivariant and also, importantly, that @xmath canonically interchanges
the @xmath -algebras on both copies of @xmath - this is equivalent to
the data of @xmath -equivariancy of @xmath .

Consider now the diagram of functors:

  -- -- --
        
  -- -- --

Let us remark that here @xmath and @xmath are induction equivalences,
and @xmath is an equivalence of ”transport of structure” ( @xmath is an
isomorphism). The functor @xmath kills the action of vector fields on
@xmath by way of coinvariants, while @xmath kills the action of vector
fields on @xmath by way of invariants.

###### Definition 4.2.1.

1.  Denote by

      -- -------- --
         @xmath   
      -- -------- --

    the functor @xmath .

2.  Denote by

      -- -------- --
         @xmath   
      -- -------- --

    the functor @xmath .

###### Remark 4.2.2.

One might call @xmath the ”Zuckerman functor”, and @xmath the ”Bernstein
functor”. But we just call them ”averaging functors”, and reserve the
name ”Bernstein functor” for the functor @xmath to come later.

### 4.3 The functors @xmath and @xmath

Our functors @xmath and @xmath admit adjoints as follows:

###### Definition 4.3.1.

1.  Denote by

      -- -------- --
         @xmath   
      -- -------- --

    the functor @xmath , which is left adjoint to @xmath .

2.  In case @xmath , denote by

      -- -------- --
         @xmath   
      -- -------- --

    the functor @xmath , which is right adjoint to @xmath .

###### Lemma 4.3.2.

The functor @xmath is naturally isomorphic to the forgetful functor.

###### Proof.

We can describe the inversre equivalence to

  -- -------- --
     @xmath   
  -- -------- --

instead of as @xmath , as the composition

  -- -------- --
     @xmath   
  -- -------- --

Here, @xmath is the forgetful functor from the action of @xmath to the
action of @xmath via the diagonal embedding @xmath , and @xmath is the
section map @xmath .

Thus, @xmath is expressed as a composition of pullbacks

  -- -------- --
     @xmath   
  -- -------- --

which is clearly the desired forgetful functor.

∎

#### 4.3.1 Formulas when @xmath

Let us describe our four functors explicitly, in the case when @xmath .
The proofs of these formulas are just careful chases through the
diagrams and definitions.

1.   Description of @xmath : For @xmath , we denote by @xmath the space
    of algebraic functions @xmath satisfying

      -- -------- --
         @xmath   
      -- -------- --

    On it, we consider the @xmath -action given by

      -- -------- --
         @xmath   
      -- -------- --

    and the @xmath -action given by

      -- -------- --
         @xmath   
      -- -------- --

    Now, the two @xmath -actions, one coming from differentiating the
    @xmath -action and one coming from the @xmath -action - do not in
    general agree; Their difference defines a @xmath -action.

    Taking invariants w.r.t. this @xmath -action yields an @xmath
    -module, which is @xmath :

      -- -------- --
         @xmath   
      -- -------- --

2.   Description of @xmath : We assume that @xmath is reductive. The
    description is similar to that of @xmath ; we just need to take
    coinvariants w.r.t. the above @xmath -action, instead of invariants,
    and add a ”normalizing” factor:

      -- -------- --
         @xmath   
      -- -------- --

    Here, @xmath is the top exterior power of @xmath - a one-dimensional
    vector space (arising from the passage from left to right @xmath
    -modules). Since @xmath and @xmath are reductive this factor does
    not come into play in the actions.

3.   Description of @xmath : The functor @xmath is, as we explained
    above, the forgetful functor.

4.   Description of @xmath : Again we assume that @xmath is reductive.
    Given @xmath , the module @xmath is given by

      -- -------- --
         @xmath   
      -- -------- --

    Here again the factor @xmath is ”inert”, i.e. does not play a role
    in the description of the actions. The notation @xmath stands for
    taking @xmath -finite vectors. The @xmath -action on @xmath w.r.t.
    which we take the @xmath is the left regular action. Let us specify
    the @xmath -action on @xmath . The @xmath -action is the one induced
    by the right regular @xmath -action on @xmath . To specify the
    @xmath -action we prefer to describe @xmath in a different way
    first. Namely, by Peter-Weyl there is a canonical identification

      -- -------- --
         @xmath   
      -- -------- --

    where @xmath runs over isomorphism classes if irreducible algebraic
    @xmath -modules, and @xmath denotes the corresponding isotypic
    component of @xmath (the so-called ” @xmath -type”). In this
    presentation, the action of @xmath is just ”type-wise”, i.e. the
    action of every @xmath is such that the diagram

      -- -- --
            
      -- -- --

    commutes. In other words, the action on the product extends the
    original action on the sum ”by continuity” (thinking of the product
    as a completion of the sum). Notice that, in order for this to be
    well defined, it should hold that given @xmath and @xmath , there is
    a finite number of @xmath such that @xmath . This is easy to deduce
    from @xmath being an algebraic @xmath -module, by considering
    highest weights of the @xmath -modules.

    Thus we can summarize that

      -- -------- --
         @xmath   
      -- -------- --

    where the action of @xmath is ”type-wise”.

###### Lemma 4.3.3.

Suppose that @xmath is a connected unipotent subgroup satisfying @xmath
. Then @xmath , via the counit morphism @xmath , is isomorphic to the
subspace of @xmath , consisting of @xmath -torsion vectors.

###### Proof.

This follows easily from the fact that the functor from algebraic @xmath
-modules to torsion @xmath -modules, given by differentiating the
action, is an equivalence.

Let us remark that the @xmath -module structure on @xmath in this
description, as the subspace of @xmath -torsion in @xmath , is the
unique one which when restricted to @xmath gives us the original @xmath
-module structure, and when restricted to @xmath differentiates to the
@xmath -module structure. ∎

### 4.4 Some commutation properties

Denote @xmath , the algebra of global sections. We consider @xmath as a
@xmath -algebra on the point @xmath . We have the
localization-globalization adjunction

  -- -------- --
     @xmath   
  -- -------- --

The functor @xmath is given by taking global sections, while @xmath is
given by tensoring @xmath .

###### Lemma 4.4.1.

1.   The functor @xmath commutes with localization, i.e. the following
    diagram naturally @xmath -commutes:

      -- -- --
            
      -- -- --

2.   The functor @xmath commutes with globalization, i.e. the following
    diagram naturally @xmath -commutes:

      -- -- --
            
      -- -- --

###### Proof.

The verification is immediate, by chasing the diagrams. ∎

Another commutation is of @xmath with twist.

###### Lemma 4.4.2.

Let @xmath be a @xmath -equivariant line bundle on @xmath . The
following diagram naturally @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

The verification is immediate, by chasing the diagrams. ∎

## Chapter 5 The Casselman-Jacquet and Bernstein functors

In this chapter we define the Casselman-Jacquet functor @xmath , the
Bernstein functor @xmath and the geometric Bernstein functor @xmath . We
show their finiteness properties, and compare the functor @xmath to the
”traditional” Jacquet-Casselman functor @xmath . We also recall how to
see that @xmath is exact.

We work under the notations and assumptions of section 2.1 .

### 5.1 Definition

We define the Casselman-Jacquet and Bernstein functors using the
formalism of chapter 4 . For this, we set @xmath and @xmath .

###### Definition 5.1.1.

The Bernstein functor

  -- -------- --
     @xmath   
  -- -------- --

is defined as

  -- -------- --
     @xmath   
  -- -------- --

The Casselman-Jacquet functor

  -- -------- --
     @xmath   
  -- -------- --

is defined as

  -- -------- --
     @xmath   
  -- -------- --

We also define the geometric Bernstein functor using the formalism of
chapter 4 . For this, we set @xmath to be the flag variety and @xmath .

###### Definition 5.1.2.

The geometric Bernstein functor

  -- -------- --
     @xmath   
  -- -------- --

is defined as

  -- -------- --
     @xmath   
  -- -------- --

The formulas for @xmath and @xmath are only superficially the same,
because the space @xmath is absent from the notation.

The relation between @xmath and @xmath is as follows.

###### Proposition 5.1.3.

There is a natural adjunction

  -- -------- --
     @xmath   
  -- -------- --

###### Proof.

This is clear from the adjunctions of section 4.3 . ∎

The relation between @xmath and @xmath is as follows.

###### Lemma 5.1.4.

The following diagram @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

This is a particular case of the more general lemma 4.4.1 (notice that
@xmath , being the forgetful functor, clearly commutes with
localization). ∎

Let us state another property of @xmath :

###### Lemma 5.1.5.

Let @xmath be a @xmath -equivariant line bundle on @xmath . The
following diagram @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

This is a particular case of the more general lemma 4.4.2 (notice that
@xmath , being the forgetful functor, clearly commutes with twist). ∎

Finally, let us spell out concretely what are the functors @xmath and
@xmath .

Given a @xmath -module @xmath , the @xmath -module @xmath is given as

  -- -------- --
     @xmath   
  -- -------- --

Here , @xmath is a one-dimensional vector space not interfering with the
formulas for the action. @xmath is the space of algebraic functions
@xmath , satisfying @xmath for @xmath and @xmath . The @xmath -action is
via the left regular action on @xmath , and the @xmath -action is @xmath
for @xmath and @xmath . The @xmath -action w.r.t. which we take the
coinvariants is the difference between the @xmath -action gotten by
differentiating the @xmath -action, and the @xmath -action gotten by
restricting the @xmath -action.

Given a @xmath -module @xmath , the @xmath -module @xmath is given as

  -- -------- --
     @xmath   
  -- -------- --

Here again @xmath is a one-dimensional vector space not interfering with
the formulas for the action. The product is the product of @xmath -types
of @xmath , and it carries a @xmath -action ”type-wise”. We then take
the submodule of @xmath -finite and @xmath -torsion vectors.

### 5.2 Finiteness properties

###### Lemma 5.2.1.

The functor @xmath sends @xmath into @xmath .

###### Proof.

Recall that, since @xmath (resp. @xmath ) has finitely many orbits on
@xmath , coherent @xmath -equivariant (resp. @xmath -equivariant) @xmath
-modules are the same as holonomic @xmath -equivariant (resp. @xmath
-equivariant) @xmath -modules. The lemma thus follows from the fact that
holonomicity is preserved under all the performed operations in the
definition of @xmath . ∎

###### Claim 5.2.2.

The functor @xmath preserves infinitesimal character ¹ ¹ 1 this means
that if a module is killed by some ideal in @xmath , then @xmath applied
to this module is killed by the same ideal as well. and sends @xmath
into @xmath .

###### Proof.

That @xmath preserves infinitesimal character is clear from its formula.
Thus it is enough to show that for @xmath , the module @xmath is
finitely-generated over @xmath . By filtering @xmath we can assume,
without loss of generality, that @xmath for some infinitesimal character
@xmath .

Let @xmath be an antidominant weight satisfying @xmath , and consider
the localization adjunction

  -- -------- --
     @xmath   
  -- -------- --

By lemma 5.1.4 , we have @xmath . Since @xmath is antidominant, we have
@xmath , so that we get @xmath Now, @xmath is coherent, since @xmath is
finitely-generated. And since @xmath preserves coherence by lemma 5.2.1
, @xmath is coherent. Since @xmath sends coherent @xmath -modules to
finitely-generated @xmath -modules (see [ M , Section L.1, Lemma 23] ),
we obtain that @xmath is finitely-generated as a @xmath -module.

∎

###### Claim 5.2.3.

The functor @xmath preserves infinitesimal character and sends @xmath
into @xmath .

###### Proof.

That @xmath preserves infinitesimal character is clear from its formula.
Thus it is enough to show that for @xmath , the module @xmath is
finitely-generated over @xmath .

By the lemma following this claim (lemma 5.2.4 ) it is enough to show
that @xmath are finite-dimensional, where @xmath , and @xmath .
Proposition 5.3.1 , that we will discuss in the next subsection,
expresses @xmath as @xmath (times a factor which does not matter).
Writing @xmath , @xmath consists of functionals on @xmath which kill
@xmath . Since @xmath , being a module in @xmath , is finitely generated
as an @xmath -module, @xmath is of finite codimension in @xmath , and
this shows that @xmath is finite-dimensional.

∎

We needed the following lemma in the previous claim:

###### Lemma 5.2.4.

Let @xmath be a @xmath -module for which: (1) @xmath where @xmath (2)
@xmath is finite-dimensional for every @xmath and (3) @xmath acts on
@xmath via a finite-dimensional quotient. Then @xmath is
finitely-generated as an @xmath -module.

###### Proof.

Denote by @xmath the generalized weight space of @xmath with weight
@xmath . Since @xmath stabilizes the @xmath ’s, and in view of (1),
@xmath . Furthermore, by the Harish-Chandra isomorphism, and in view of
(3), the weights by which @xmath acts on @xmath are all contained in a
finite subset @xmath . This forces that for any fixed @xmath , there
exists @xmath such that @xmath (because weights appearing in @xmath
become further and further away from @xmath , as @xmath grows). From
this we conclude that the @xmath ’s are all finite-dimensional.

Denote now by @xmath the sub- @xmath -module of @xmath generated by
@xmath . @xmath is a finitely generated @xmath -module, and we would
like to show that @xmath , thus concluding the proof.

To that end, consider @xmath . As a quotient of @xmath , @xmath is also
the sum of finite-dimensional generalized weight spaces of @xmath .
Since taking generalized weight space is an exact functor, @xmath for
@xmath . But this forces @xmath , since again all weights by which
@xmath acts on @xmath are contained in @xmath . Now, @xmath forces
@xmath (since, would we have a non-zero vector in @xmath , we would
start applying elements from @xmath to it; Eventually it will become
zero, and at one step before that, we will get a non-zero element of
@xmath ). Thus we have @xmath and we are done.

∎

From now on, we will consider the functors @xmath from, and to, the
categories @xmath rather than @xmath .

### 5.3 Comparison with the traditional Casselman-Jacquet functor

Let us describe how the functor

  -- -------- --
     @xmath   
  -- -------- --

is related to the ”usual Jacquet-Casselman” functor.

First, let us recall the ”usual Jacquet-Casselman” functor, in its
contravariant form (call it @xmath ): For a module @xmath , @xmath is
the submodule of @xmath -torsion vectors in the abstract dual of @xmath
.

Recall also the duality equivalence @xmath , given by sending a module
@xmath to @xmath (here, @xmath denote the @xmath -types of @xmath ).

###### Proposition 5.3.1.

@xmath (as functors @xmath ).

###### Proof.

This is immediate. Clearly, @xmath can be identified with the abstract
dual of @xmath . Thus, @xmath can be identified with the @xmath
-torsion, @xmath -finite vectors in the abstract dual of @xmath . Since
the subspaces killed by @xmath are finite-dimensional and preserved by
@xmath , one actually can drop the demand ” @xmath -finite”. ∎

Casselman shows that @xmath is exact. We will briefly recall how to show
it in subsection 5.3.1 .

###### Theorem 5.3.2 (Casselman).

The functor @xmath is exact.

###### Proof.

This immediately follows from @xmath being exact, and proposition 5.3.1
. ∎

#### 5.3.1 The exactness of @xmath

Let us sketch, following Casselman, how to prove the exactness of @xmath
mentioned above. In fact, one shows the exactness of a more general
functor. Let @xmath be a nilpotent (finite-dimensional) Lie algebra over
@xmath . For an @xmath -module @xmath and @xmath , we denote @xmath and
@xmath .

We consider the categories:

1.  @xmath - the category of finitely-generated @xmath -modules.

2.  @xmath - the category of @xmath -modules @xmath which satisfy @xmath
    and that @xmath is finite-dimensional as a @xmath -vector space.

3.  @xmath - the category of @xmath -modules @xmath which satisfy @xmath
    and that @xmath is finite-dimensional as a @xmath -vector space.

Also, we consider the functors:

1.  @xmath sending a module @xmath to @xmath .

2.  @xmath sending a module @xmath to @xmath .

And, we consider the duality functors:

1.  @xmath sending a module @xmath to @xmath .

2.  @xmath sending a module @xmath to @xmath , the continuous dual; That
    is, @xmath consists of functionals on @xmath , which annihilate
    @xmath for some @xmath .

###### Lemma 5.3.3.

1.   The dualities @xmath are well-defined, and are mutually inverse
    equivalences of categories.

2.   One has a canonical isomorphism @xmath .

###### Proposition 5.3.4.

The functor @xmath is exact.

###### Proof.

This is done as in the classical Artin-Rees approach.

Step 1: It is enough to show that for @xmath , there exists @xmath such
that @xmath for large @xmath .

Step 2: To show what is wanted in step 1, it is enough to show that the
algebra @xmath is left Noetherian; Here, @xmath is @xmath . Indeed, once
we know that @xmath is left Noetherian, we consider (with the notation
of step 1) the @xmath -module @xmath . It is finitely generated being a
submodule of @xmath . Writing what the finite-generation means,
immediately gives what is wanted in step 1.

Step 3: (taken from [ W , section 0.6.4] ) To show that @xmath is left
Noetherian, consider @xmath . Here, @xmath , and @xmath for @xmath .
Now, @xmath is a Lie algebra inside @xmath , and thus we get a morphism
@xmath . This morphism is surjective (since already @xmath in degrees
@xmath and @xmath suffice to generate @xmath ). Now note, crucially,
that @xmath is finite-dimensional, since @xmath is nilpotent! Hence
@xmath is left Noetherian (as the universal enveloping algebra of a
finite-dimensional Lie algebra), and thus @xmath is left Noetherian as a
quotient of @xmath .

∎

###### Corollary 5.3.5.

The functor @xmath is exact.

###### Proof.

This follows from the proposition and @xmath . ∎

## Chapter 6 The derived geometric Bernstein functor

In this chapter we define the derived geometric Bernstein functor @xmath
. When composing it with @xmath -th cohomology, we reobtain @xmath . We
prove a basic (for us) property of @xmath , that is sends standard
objects to acyclic objects.

Let us mention that although in the technical approach of this thesis we
only use @xmath to obtain properties of @xmath , a better approach would
be to consider @xmath as the ”main player”. One would like then to show
that @xmath admits a right adjoint. See conjectures 9.2.1 and 9.2.2 .

### 6.1 Equivariant derived categories

Let @xmath be a smooth algebraic variety, equipped with an action of an
affine algebraic group @xmath . Let @xmath be an @xmath -equivariant TDO
on @xmath . We can consider the abelian category @xmath of holonomic
@xmath -equivariant @xmath -modules on @xmath . Bernstein and Lunts ( [
BL ] ) explain how to define a bounded @xmath -category @xmath , with
heart @xmath - the derived category of @xmath -equivariant holonomic
@xmath -modules on @xmath . It is not, in general, equivalent to the
naive bounded derived category of @xmath .

We briefly recall the definition of @xmath . Consider the category of
smooth @xmath -resolutions @xmath ; Namely, an object of @xmath is a
free @xmath -variety @xmath together with a smooth @xmath -morphism
@xmath . Given such a resolution, denoting by @xmath the quotient map,
on @xmath we have the TDO @xmath associated to the @xmath -equivariant
TDO @xmath on @xmath . We associate to our resolution the derived
category of holonomic @xmath -modules on @xmath , of which we think as
an approximation to @xmath . This association is naturally a @xmath
-functor, and we take its @xmath -limit. This is @xmath .

There is always a canonical @xmath -exact functor @xmath , identifying
the hearts.

###### Remark 6.1.1.

We considered holonomic @xmath -modules just because this is the variant
that we will consider below. One can define in the same way as above the
derived category of @xmath -equivariant @xmath -modules.

### 6.2 Definition

Consider again the diagram of chapter 4 :

  -- -- --
        
  -- -- --

and recall the equivariant structures that we imposed there on the
varieties in the diagram, as well as the TDO’s (we take the TDO @xmath
on @xmath and on the other spaces we take its pullback along the
vertical maps).

We wish to define a functor

  -- -------- --
     @xmath   
  -- -------- --

such that @xmath .

###### Definition 6.2.1.

The derived geometric Bernstein functor

  -- -------- --
     @xmath   
  -- -------- --

is defined as the composition

  -- -- --
        
  -- -- --

In the above definition, the functor @xmath is the ( @xmath -exact)
forgetful functor. The functor @xmath is the @xmath -exact pullback (it
is an induction equivalence). The functor @xmath is the ( @xmath -exact)
equivalence of ”transport of structure” along the isomorphism @xmath .
The functor @xmath is the ( @xmath -exact) ”quotient equivalence”. The
functor @xmath is the pushforward - it is right- @xmath -exact.

The functor @xmath is right- @xmath -exact.

###### Lemma 6.2.2.

The functors

  -- -- --
        
  -- -- --

are naturally isomorphic.

###### Proof.

This is clear from inspecting the operations in the definition of both
functors. ∎

### 6.3 Commutation properties

###### Lemma 6.3.1.

Let @xmath be a @xmath -equivariant line bundle on @xmath . The
following diagram @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

This follows from the projection formula. ∎

For the next commutation property, we recall the intertwining functors.
Namely, fixing a closed subgroup @xmath , for every @xmath we have
functors @xmath . These are defined by considering the diagram

  -- -- --
        
  -- -- --

where @xmath is the subvariety of pairs of points in relative position
@xmath , and @xmath are the projections on the first and second factor.
One then defines

  -- -------- --
     @xmath   
  -- -------- --

Here, @xmath is a suitable @xmath -equivariant line bundle, fixing the
discrepancy between the TDO’s @xmath and @xmath .

One has the following properties of the intertwining functors: First of
all, if @xmath is antidominant and regular,

  -- -------- --
     @xmath   
  -- -------- --

commutes with the derived global sections functors (here @xmath ,
because we don’t want to think about derived global sections in the
equivariant setting). Second, the functor

  -- -------- --
     @xmath   
  -- -------- --

is inverse to the functor

  -- -------- --
     @xmath   
  -- -------- --

###### Lemma 6.3.2.

For every @xmath , the following diagram @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

This follows from smooth base change, and the projection formula. ∎

### 6.4 The category @xmath

We will use, regarding the category @xmath , the definitions and
statements of appendix B .

The Weyl group @xmath has the Bruhat order, and we call a subset @xmath
closed, if @xmath and @xmath imply @xmath . Closed subsets of @xmath are
in bijection with @xmath -invariant closed subvarieties of @xmath -
associating to @xmath the subvariety @xmath . We associate to a closed
subset @xmath the Serre subcategory of @xmath , which consists of
modules whose support lies in @xmath .

###### Claim 6.4.1.

The above association defines an affine simple @xmath -stratification on
@xmath , and @xmath is an equivalence.

###### Proof.

This is standard, using the criteria of appendix B . ∎

The above claim makes @xmath very comfortable to work with; It has
enough projectives and injectives, is of finite cohomological dimension,
has the formalism of standard and costandard objects, etc.; See appendix
B .

### 6.5 An acyclicity property

###### Proposition 6.5.1.

The functor

  -- -------- --
     @xmath   
  -- -------- --

sends standard-filtered objects to acyclic objects.

###### Proof.

We reduce first to the case when @xmath is antidominant and regular.
This is done by choosing a @xmath -equivariant line bundle @xmath such
that @xmath is antidominant and regular, and using lemma 6.3.1 (notice
that tensoring with @xmath is a @xmath -exact equivalence, which also
preserves the @xmath -stratification structure on the @xmath
-equivariant side).

So, let us assume that @xmath is antidominant and regular. It is enough
to check that @xmath sends a standard object to an acyclic object, so
fix a standard object @xmath . To check that @xmath is acyclic, it is
enough to do so when forgetting the @xmath -equivariancy. Furthermore,
since @xmath is antidominant and regular, it is enough to check that the
derived global sections of @xmath are acyclic. Those are isomorphic to
the derived global sections of @xmath . We have:

  -- -------- --
     @xmath   
  -- -------- --

Here, the first isomorphism is by lemma 6.3.2 . For the second one,
notice that @xmath (this immediately follows from the geometry in the
definition of @xmath ), and recall that @xmath is inverse to @xmath , so
that @xmath . For the third isomorphism notice that @xmath - this
calculation again follows immediately from the geometry in the
definition of @xmath .

So, we are interested to show that the derived global sections of @xmath
are acyclic. This is the case because @xmath is affine, and hence @xmath
is an affine morphism.

∎

## Chapter 7 The functor @xmath and its property

In this chapter we show that @xmath admits a right adjoint @xmath , and
show its basic property - that it sends injective objects to
costandard-filtered objects.

### 7.1 The functor @xmath

###### Claim 7.1.1.

The functor

  -- -------- --
     @xmath   
  -- -------- --

admits an exact right adjoint

  -- -------- --
     @xmath   
  -- -------- --

###### Proof.

First assume that @xmath is antidominant and regular. Then in the @xmath
-commutative diagram

  -- -- --
        
  -- -- --

the vertical functors are equivalences. Hence, @xmath admits an exact
right adjoint, since @xmath does.

In the case of a general @xmath , choose a @xmath -equivariant line
bundle @xmath such that @xmath is antidominant and regular. Then the
@xmath -commutative diagram

  -- -- --
        
  -- -- --

shows that @xmath between the weight @xmath categories admits an exact
right adjoint, since @xmath between the weight @xmath categories admits
an exact right adjoint (as the vertical functors are equivalences). ∎

###### Lemma 7.1.2.

The following diagram @xmath -commutes:

  -- -- --
        
  -- -- --

###### Proof.

This immediately follows from the commutation of @xmath with @xmath , by
taking adjoints. ∎

### 7.2 Acycilicity properties

Since @xmath admits enough projective objects and is of finite
cohomological dimension, we can construct the left derived functor of
@xmath :

  -- -------- --
     @xmath   
  -- -------- --

For the notions in the next lemma and its proof, see definition B.2.8
and the remark that follows it.

###### Lemma 7.2.1.

The class of standard-filtered objects in @xmath is big enough and
adapted to @xmath .

###### Proof.

The class of standard-filtered objects in @xmath is big enough by lemma
B.2.10 . Thus, it is enough to see that this class is adapted to @xmath
. Thus, let

  -- -------- --
     @xmath   
  -- -------- --

be a short exact sequence of standard-filtered objects in @xmath .
Applying the functor @xmath and taking cohomology, we obtain the exact
sequence

  -- -------- --
     @xmath   
  -- -------- --

By proposition 6.5.1 , @xmath . Hence, the exact sequence becomes

  -- -------- --
     @xmath   
  -- -------- --

and indeed the class of standard-filtered objects is adapted to @xmath .
∎

###### Proposition 7.2.2.

The functor

  -- -------- --
     @xmath   
  -- -------- --

sends standard-filtered objects to acyclic objects.

###### Proof.

This follows immediately from lemma 7.2.1 , since left derived functors
can be computed term-wise on complexes of objects in a big enough
adapted class. ∎

Since the left-exact functor @xmath is in fact exact, its right-derived
functor

  -- -------- --
     @xmath   
  -- -------- --

is constructed trivially (applying the functor to complexes term-wise).
The functor @xmath is left adjoint to the functor @xmath .

###### Proposition 7.2.3.

The functor

  -- -------- --
     @xmath   
  -- -------- --

sends injective objects to costandard-filtered objects.

###### Proof.

Let @xmath be injective. In view of lemma B.2.11 , we want to show that
for every standard object @xmath , The @xmath -space @xmath is acyclic.
By adjunction, this is the same as @xmath . Since @xmath is acyclic by
proposition 7.2.2 and @xmath is injective, this @xmath -space is clearly
acyclic. ∎

## Chapter 8 The main statement

In this chapter we prove our main statement, that the module one obtains
by applying @xmath to a principal series Harish-Chandra module admits a
canonical @xmath -filtration whose subquotients are twisted Verma
modules.

### 8.1 Principal series modules

For @xmath , denote by @xmath the module of coinvariants, i.e. the
quotient of @xmath by the subspace generated @xmath , for @xmath .

###### Definition 8.1.1.

1.  the principal series functor

      -- -------- --
         @xmath   
      -- -------- --

    is the right adjoint to

      -- -------- --
         @xmath   
      -- -------- --

2.  The geometric principal series functor

      -- -------- --
         @xmath   
      -- -------- --

    is defined as @xmath .

###### Remark 8.1.2.

We have @xmath ; This is clear from the geometry in the definition of
@xmath .

The next lemma will, in particular, show that @xmath exists.

###### Lemma 8.1.3.

We have @xmath .

###### Proof.

The left adjoint of @xmath is @xmath , i.e. it takes a module @xmath to
the fiber of @xmath at @xmath , which is indeed @xmath . ∎

Another property which we record is:

###### Lemma 8.1.4.

The objects in the image of

  -- -------- --
     @xmath   
  -- -------- --

are injective.

###### Proof.

The follows at once from @xmath having an exact left adjoint, and @xmath
being semisimple. ∎

### 8.2 Twisted Verma modules

###### Definition 8.2.1.

Given @xmath , the twisted Verma functor

  -- -------- --
     @xmath   
  -- -------- --

is defined as

  -- -------- --
     @xmath   
  -- -------- --

### 8.3 Main statement

###### Theorem 8.3.1.

Let @xmath .

1.   The object

      -- -------- --
         @xmath   
      -- -------- --

    is costandard-filtered.

2.   The @xmath -th subquotient in the canonical @xmath -filtration of
    @xmath is isomorphic to @xmath .

###### Remark 8.3.2.

Although the @xmath -filtrations that we obtain in the above theorem and
the corollary that follows are canonical, we are not able yet to
identify canonically the subquotients, although it is clear that
conjecture 9.3.1 should hold.

###### Proof (of Theorem 8.3.1).

That @xmath is costandard-filtered follows from the facts that objects
in the image of @xmath are injective (lemma 8.1.4 ) and @xmath sends
injective objects to costandard-filtered objects (proposition 7.2.3 ).

The proof of part @xmath will be sketched in appendix C .

∎

###### Corollary 8.3.3.

Let @xmath . The object

  -- -------- --
     @xmath   
  -- -------- --

(this is the Casselman-Jacquet functor applied to a principal series
module) admits a canonical @xmath -filtration, whose @xmath -th
subquotient is isomorphic to @xmath .

###### Proof.

We have:

  -- -------- --
     @xmath   
  -- -------- --

We now apply @xmath to the canonical @xmath -filtration on @xmath to
obtain a @xmath -filtration on @xmath , whose @xmath -th subquotient is
isomorphic to @xmath . For this to be possible, according to remark
B.2.13 , we want to see that @xmath transforms a short exact sequence
whose first term is costandard-filtered, into a short exact sequence.
This is evident, since the derived global sections of an object of the
form @xmath , where @xmath , are acyclic, since @xmath is affine. ∎

## Chapter 9 Some questions and conjectures

### 9.1 Regarding @xmath

The answer to the following question if probably ”yes”.

###### Question 9.1.1.

Does the functor

  -- -------- --
     @xmath   
  -- -------- --

preserve finite-generation over @xmath ?

The following conjecture is very interesting.

###### Conjecture 9.1.2.

The functor @xmath is exact on the subcategory of modules in @xmath
which are finitely generated over @xmath .

###### Remark 9.1.3.

Granted that the conjecture above is proven, it makes sense to redefine
@xmath on the whole of @xmath , as being as before on modules
finitely-generated over @xmath , and extended to all modules by the
request of commuting with direct limits.

For the next conjecture, recall the duality equivalence

  -- -------- --
     @xmath   
  -- -------- --

given by taking the @xmath -torsion vectors in the abstract dual. Also,
denote by @xmath the Casselman-Jacquet functor resulting from the
initial choice of the Borel @xmath , rather than @xmath .

###### Conjecture 9.1.4.

The following diagram canonically @xmath -commutes, perhaps up to
tensoring by some power of @xmath :

  -- -- --
        
  -- -- --

###### Remark 9.1.5.

It seems that the above conjecture is known to be true in the analytic
case; See the last paragraph in section 12 of [ C2 ] .

Let us denote by @xmath the functor that sends @xmath to the submodule
of @xmath -finite vectors in the @xmath -completion of @xmath ( @xmath
is a version of the Casselman-Jacquet functor; See, for example, [ ENV ]
). Conjecture 9.1.4 is equivalent to the following one:

###### Conjecture 9.1.6.

The functors @xmath and @xmath are canonically isomorphic, perhaps up to
tensoring by some power of @xmath .

Let us see why the conjectures 9.1.4 and 9.1.6 are equivalent, omitting
everywhere powers of @xmath . Conjecture 9.1.4 says that @xmath
canonically, while conjecture 9.1.6 says that @xmath canonically. Thus,
in order to see that the conjectures are equivalent, we want to check
that @xmath canonically. From proposition 5.3.1 , @xmath (here, @xmath
is the functor @xmath w.r.t. the choice of Borel @xmath , rather than
@xmath ). Thus, @xmath . Now, recalling that @xmath is the space of
@xmath -torsion vectors in @xmath , we see that we can identify the
abstract dual of @xmath with the @xmath -completion of @xmath . Thus, we
can identify @xmath with the space of @xmath -torsion vectors in the
@xmath -completion of @xmath , i.e. with @xmath .

###### Remark 9.1.7.

From the previous paragraph, we see that without tensoring by a power of
@xmath , the two conjectures are not exactly compatible; Something like
the square root of @xmath will appear in some of them.

### 9.2 Regarding @xmath

###### Conjecture 9.2.1.

The functor

  -- -------- --
     @xmath   
  -- -------- --

admits a @xmath -exact right adjoint

  -- -------- --
     @xmath   
  -- -------- --

The following conjecture would imply conjecture 9.1.6 , and thus
conjecture 9.1.4 .

###### Conjecture 9.2.2.

The functor

  -- -------- --
     @xmath   
  -- -------- --

is isomorphic to the geometric Jacquet functor of [ ENV ] (when their
functor is lifted to the correct equivariant categories) - again perhaps
up to tensoring by some power of @xmath .

### 9.3 Regarding the main statement

###### Conjecture 9.3.1.

The @xmath -th subquotient of the canonical filtration of the functor

  -- -------- --
     @xmath   
  -- -------- --

is isomorphic to @xmath (perhaps canonically given a choice of a lifting
of @xmath to an element of @xmath ). Thus, in turn, the @xmath -th
subquotient of the canonical filtration of the functor

  -- -------- --
     @xmath   
  -- -------- --

is isomorphic to @xmath .

A slightly neater and more general formulation would be as follows.
Consider the extended universal enveloping algebra @xmath (see [ BG ]
for a more detailed discussion of it). It is straightforward to define

  -- -------- --
     @xmath   
  -- -------- --

  -- -------- --
     @xmath   
  -- -------- --

and

  -- -------- --
     @xmath   
  -- -------- --

###### Conjecture 9.3.2.

The functor

  -- -------- --
     @xmath   
  -- -------- --

admits a canonical @xmath -filtration, whose @xmath -th subquotient is
isomorphic to @xmath .

## Appendix A @xmath-algebras and some functors

Our reference for @xmath -algebras is [ BB ] . Everything in this
appendix is standard, except the functors @xmath and @xmath .

### a.1 @xmath-algebras

Given a smooth variety @xmath , we have the notion of a @xmath -algebra
on @xmath . An important particular case of a @xmath -algebra is that of
a TDO. An important particular case of a TDO is the sheaf of
differential operators @xmath .

Given a smooth morphism @xmath and a @xmath -algebra @xmath on @xmath ,
we have an induced @xmath -algebra @xmath on @xmath . If @xmath is a
TDO, then so is @xmath . Also, @xmath .

If an affine algebraic group @xmath acts on @xmath , we have the notion
of a @xmath -equivariant @xmath -algebra on @xmath . One possible way to
define a @xmath -equivariant @xmath -algebra on @xmath is as a @xmath
-algebra @xmath , equipped with an isomorphism @xmath satisfying a
suitable cocycle condition, where @xmath are the projection and action
maps.

Given a variety @xmath on which @xmath acts, a smooth @xmath
-equivariant morphism @xmath , and a @xmath -equivariant @xmath -algebra
@xmath on @xmath , the @xmath -algebra @xmath has a natural @xmath
-equivariant structure.

Suppose that @xmath is a principal @xmath -fibration. By this we mean
that the @xmath -action on @xmath is trivial and that etale-locally
@xmath looks like the projection @xmath . Then, via @xmath , the
category of @xmath -algebras on @xmath is equivalent to the category of
@xmath -equivariant @xmath -algebras on @xmath , and we denote the
inverse equivalence by @xmath .

Finally, let us remind that if @xmath is a @xmath -equivariant line
bundle on @xmath , and @xmath a @xmath -equivariant @xmath -algebra on
@xmath , then we have the @xmath -equivariant @xmath -algebra @xmath on
@xmath - the twist of @xmath by @xmath - which is defined as @xmath
(where the @xmath is w.r.t. the @xmath -action on the right).

### a.2 Modules over @xmath-algebras

Let @xmath be a smooth variety and @xmath a @xmath -algebra on @xmath .
We have the notion of an @xmath -module, and we denote by @xmath the
abelian category of @xmath -modules.

If an affine algebraic group @xmath acts on @xmath , we have the notion
of a (strongly) @xmath -equivariant @xmath -module, and we denote by
@xmath the abelian category of @xmath -equivariant @xmath -modules.

If @xmath is a @xmath -equivariant line bundle on @xmath , and @xmath a
@xmath -equivariant @xmath -algebra on @xmath , then we have an
equivalence

  -- -------- --
     @xmath   
  -- -------- --

### a.3 The functors @xmath

Let @xmath be a smooth variety and @xmath a @xmath -algebra on @xmath .
Let @xmath be a smooth morphism. We have the functor

  -- -------- --
     @xmath   
  -- -------- --

On the level of @xmath -modules, this functor is just the usual pullback
of quasi-coherent sheaves.

Suppose that an affine algebraic group @xmath acts on @xmath and @xmath
, and that @xmath is @xmath -equivariant. Then the functor @xmath
naturally lifts to a functor

  -- -------- --
     @xmath   
  -- -------- --

Suppose that @xmath is a principal @xmath -fibration. Then the functor

  -- -------- --
     @xmath   
  -- -------- --

is an equivalence; Its inverse equivalence

  -- -------- --
     @xmath   
  -- -------- --

sends a sheaf @xmath to the sheaf of @xmath -invariants of its
pushforward to @xmath . If @xmath admits a section @xmath (i.e. the
principal @xmath -fibration is trivialized), then @xmath is identified
with @xmath . If an additional affine algebraic group @xmath acts on
@xmath and @xmath , commuting with the action of @xmath , then the
equivalences above extend to equivalences

  -- -------- --
     @xmath   
  -- -------- --

### a.4 The functors @xmath

Let @xmath be a smooth variety and @xmath a @xmath -algebra on @xmath .
Let @xmath be a smooth affine variety. Denote by @xmath the projection.
We have @xmath . Denote by @xmath the global sections of the
corresponding sheaves on @xmath (of differential operators, regular
functions, vector fields, top differential forms).

Since @xmath is affine we can (and will) identify @xmath -modules with
@xmath -modules with @xmath -action (in other words, @xmath -module
objects in the category @xmath ). Also, recall the equivalence

  -- -------- --
     @xmath   
  -- -------- --

which translates between left and right @xmath -modules; @xmath is given
by tensoring with @xmath over @xmath , while @xmath is given by
tensoring with the inverse module.

#### a.4.1 The non-equivariant case

We consider four functors, given by the usual formalism of @xmath and
@xmath (and translation via @xmath and @xmath when needed). The fourth
one, @xmath , we will not construct or use in this thesis, unless @xmath
.

1.  The functor

      -- -------- --
         @xmath   
      -- -------- --

    is defined by

      -- -------- --
         @xmath   
      -- -------- --

    In other words, the functor @xmath assigns to a @xmath -module the
    submodule of sections killed by @xmath .

2.  The functor

      -- -------- --
         @xmath   
      -- -------- --

    is defined by

      -- -------- --
         @xmath   
      -- -------- --

    In other words, the functor @xmath first converts a left @xmath
    -module to a right @xmath -module, and then takes its coinvariants
    under @xmath .

3.  We have already encountered the functor

      -- -------- --
         @xmath   
      -- -------- --

    It is given by

      -- -------- --
         @xmath   
      -- -------- --

4.  In case @xmath , the functor

      -- -------- --
         @xmath   
      -- -------- --

    is defined by

      -- -------- --
         @xmath   
      -- -------- --

We have the adjunctions

  -- -------- --
     @xmath   
  -- -------- --

and

  -- -------- --
     @xmath   
  -- -------- --

#### a.4.2 The equivariant case

Suppose that an affine algebraic group @xmath acts on @xmath and on
@xmath and consider the diagonal @xmath -action on @xmath . Then @xmath
is @xmath -equivariant. All four functors and adjunctions from the
previous subsection carry over to this equivariant case, with one
change: In the definition of the functor @xmath , we should take @xmath
-finite vectors: @xmath .

If the @xmath -action on @xmath is homogeneous, we have a surjection
@xmath , and thus the functor @xmath can be described as taking sections
killed by @xmath , and the functor @xmath can be described as taking
coinvariants under @xmath (after the translation to a right @xmath
-module).

## Appendix B Filtrations and Stratifications

We fix a field @xmath , and a finite partially ordered set @xmath . We
use the topology on @xmath , where a subset @xmath is closed if @xmath
and @xmath imply @xmath . We write, for @xmath , @xmath (the closure in
the topology).

Throughout, @xmath and @xmath will denote @xmath -linear abelian
categories, and all functors will be assumed @xmath -linear.

### b.1 Filtrations on objects

###### Definition B.1.1.

A @xmath -filtration on an object @xmath is the data of a subobject
@xmath for every @xmath , such that:

1.  For @xmath , we have @xmath .

2.  @xmath and @xmath .

3.  For @xmath , the morphism @xmath (the direct sum of the two natural
    embeddings) is an isomorphism.

###### Remark B.1.2.

Condition (3) is equivalent to the condition: For @xmath , we have
@xmath and @xmath . Thus, one can reformulate the definition of a @xmath
-filtration as a poset morphism @xmath which preserves finite supremums
and infimums (here, @xmath is the class of subobjects of @xmath ).

Another equivalent formulation of condition (3) is that for @xmath , the
map @xmath is an isomorphism.

Suppose given a @xmath -filtration on an object @xmath . For a locally
closed subset @xmath , i.e a subset of the form @xmath where @xmath are
closed, we define @xmath . This also is canonically isomorphic to @xmath
in the notation above, by condition (3) in the definition of a @xmath
-filtration. In particular, we define the @xmath -th subquotient @xmath
.

### b.2 Stratifications on categories

###### Definition B.2.1.

A @xmath -stratification on @xmath is the data of a Serre subcategory
@xmath for every @xmath , such that:

1.  For @xmath , we have @xmath , and the projection @xmath admits a
    left and a right adjoint.

2.  @xmath and @xmath .

3.  For @xmath , the functor @xmath (the direct sum of the two natural
    embeddings) is an equivalence.

###### Remark B.2.2.

The above definition is taken from [ BB , Section 2.6.4] .

Suppose given a @xmath -stratification on @xmath . For a locally closed
subset @xmath , i.e a subset of the form @xmath where @xmath are closed,
we define @xmath . This also is canonically equivalent to @xmath in the
notation above, by condition (3) in the definition of a @xmath
-stratification. In particular, we define @xmath . Denote by

  -- -------- --
     @xmath   
  -- -------- --

the projection, by @xmath its left adjoint and by @xmath its right
adjoint. It is a standard fact that the unit and counit morphisms,
@xmath and @xmath , are isomorphisms.

###### Definition B.2.3.

@xmath is called smallish if:

1.  Every object in @xmath is of finite length.

2.  There are finitely many isomorphism classes of irreducible objects
    in @xmath .

3.  Every irreducible object @xmath satisfies @xmath .

###### Definition B.2.4.

A @xmath -stratification on @xmath is called simple if:

1.  For every @xmath , the category @xmath is smallish and semisimple.

2.  For every @xmath and @xmath , we have @xmath .

In addition, the @xmath -stratification is called affine , if the
functors @xmath and @xmath are exact, for every @xmath .

###### Theorem B.2.5.

Suppose given a simple @xmath -stratification on @xmath . Then:

1.  @xmath is smallish.

2.   The irreducible objects in @xmath are exactly the objects of the
    form @xmath , where @xmath and @xmath is irreducible.

3.  @xmath has enough projective objects, and every projective object in
    @xmath admits a filtration whose subquotients are in the image of
    @xmath for various @xmath .

4.  @xmath has enough injective objects, and every injective object in
    @xmath admits a filtration whose subquotients are in the image of
    @xmath for various @xmath .

5.  @xmath has finite cohomological dimension.

6.   Every right exact functor @xmath is representable (here, @xmath is
    the smallish category of finite-dimensional vector spaces over
    @xmath ). In particular, every right exact functor @xmath admits a
    right adjoint.

###### Proof.

For parts 3,4,5, we refer to [ BGS , Section 3.2] . In order to fit in
their setup, we need to verify parts 1,2. This verification is quite a
standard nice exercise in playing with the various adjunctions - one
works recursively, each time focusing on a subcategory @xmath and its
quotient @xmath , where @xmath and @xmath is maximal. For part 6, see
for example [ MV , Proposition 2.4] . ∎

#### b.2.1 Standard objects in stratified categories

Suppose that we are given an affine simple @xmath -stratification on
@xmath .

###### Definition B.2.6.

An object @xmath is called:

-    standard , if @xmath is isomorphic to @xmath for some @xmath and
    irreducible @xmath .

-    costandard , if @xmath is isomorphic to @xmath for some @xmath and
    irreducible @xmath .

-    standard-filtered , if @xmath admits a filtration by standard
    objects.

-    costandard-filtered , if @xmath admits a filtration by costandard
    objects.

###### Remark B.2.7.

In theorem B.2.5 it is said that projective objects are
standard-filtered, and injective objects are costandard-filtered.

Let us notice that all the statements and definitions below have dual
ones, which we do not state explicitly.

###### Definition B.2.8.

A class of objects @xmath is called (left-) big enough , if the
following holds:

1.  @xmath is closed under finite direct sums.

2.  If in a short exact sequence

      -- -------- --
         @xmath   
      -- -------- --

    we have @xmath , then @xmath .

3.  Every object in @xmath can be presented as a quotient of an object
    in @xmath .

###### Remark B.2.9.

Classes of objects which are big enough are important for constructing
derived functors. Namely, given a right exact functor @xmath , a class
of objects @xmath is said to be adapted for @xmath , if it is big
enough, and @xmath transforms a short exact sequence of objects in
@xmath into a short exact sequence. In that case, the left derived
functor @xmath can be constructed by the rule of applying @xmath
term-wise to complexes of objects in @xmath . In particular, @xmath
sends objects from @xmath to acyclic objects.

###### Lemma B.2.10.

The class of standard-filtered objects in @xmath is big enough, and is
adapted to the functors @xmath , where @xmath is costandard-filtered.

###### Lemma B.2.11.

For @xmath , the following are equivalent:

1.  @xmath is standard-filtered.

2.   For any costandard-filtered object @xmath , the @xmath -space
    @xmath is acyclic.

###### Lemma B.2.12.

A standard-filtered object @xmath has a canonical @xmath -filtration,
characterized as the unique @xmath -filtration on @xmath for which the
@xmath -th subquotient is in the image of @xmath , for every @xmath .

###### Remark B.2.13.

In corollary 8.3.3 in the main text, the following remark will be
useful. Let @xmath be a functor, with the property that it transforms a
short exact sequence whose first term is costandard-filtered, into a
short exact sequence. Then for a costandard-filtered @xmath , denoting
by @xmath the canonical @xmath -filtration mentioned in the previous
lemma, we have that @xmath is a @xmath -filtration on @xmath , whose
@xmath -th subquotient is canonically isomorphic to @xmath applied to
the @xmath -th subquotient of @xmath .

#### b.2.2 The derived setting

###### Claim B.2.14.

Let @xmath be a bounded @xmath -category equipped with a @xmath -exact
functor @xmath inducing an equivalence on the hearts (which we will just
identify notationally). Suppose that we are given a @xmath
-stratification on @xmath .

1.   For any two @xmath , the map

      -- -------- --
         @xmath   
      -- -------- --

    is injective, and hence condition (2) in the definition of a simple
    stratification is implied by the similar condition

      -- -------- --
         @xmath   
      -- -------- --

2.   If the @xmath -stratification on @xmath is simple and @xmath for
    every standard @xmath , costandard @xmath and @xmath , then @xmath
    is an equivalence.

###### Proof.

For part (1) see [ BGS , Lemma 3.2.4] , and for part (2) see [ BGS ,
Corollary 3.3.2] . ∎

## Appendix C Sketch of proof of part @xmath of theorem 8.3.1

In this appendix we sketch the proof of part @xmath of theorem 8.3.1 .

For the following preparatory claim we just sketch the reasoning,
without providing detail.

###### Claim C.0.1.

Let @xmath . The objects

  -- -------- --
     @xmath   
  -- -------- --

for different @xmath , are all equal in the Grothendieck group.

###### Proof.

We can first, by tensoring with a suitable @xmath -equivariant line
bundle, reduce to the case when @xmath is regular antidominant.

Next, the global sections of

  -- -------- --
     @xmath   
  -- -------- --

are the same as those of

  -- -------- --
     @xmath   
  -- -------- --

Thus, in order to verify the claim, we should verify that the
Harish-Chandra modules

  -- -------- --
     @xmath   
  -- -------- --

for different @xmath , are all equal in the Grothendieck group. This is
a well-known property of the principal series representations, that
principal series representations with the same central and infinitesimal
characters are equal in the Grothendieck group. ∎

###### Proof (of part @xmath of theorem 8.3.1).

To see what is the @xmath -th subquotient in the canonical @xmath
-filtration of @xmath , we can assume without loss of generality that
@xmath is irreducible. We want to see that, for an irreducible @xmath ,
the space

  -- -------- --
     @xmath   
  -- -------- --

is one-dimensional if @xmath is isomorphic to @xmath , and is zero
otherwise. By adjunction, this is the same as

  -- -------- --
     @xmath   
  -- -------- --

First, let us notice that we can replace the dimension of

  -- -------- --
     @xmath   
  -- -------- --

with the Euler characteristic of

  -- -------- --
     @xmath   
  -- -------- --

Indeed, the later is acyclic because, recalling that @xmath , we have

  -- -------- --
     @xmath   
  -- -------- --

and the later is clearly acyclic.

Second, we can replace the Euler characteristic of

  -- -------- --
     @xmath   
  -- -------- --

with the Euler characteristic of

  -- -------- --
     @xmath   
  -- -------- --

Indeed, this follow from claim C.0.1 .

Now, the later is just

  -- -------- --
     @xmath   
  -- -------- --

which, by adjunction, can be written as

  -- -------- --
     @xmath   
  -- -------- --

This clearly has Euler characteristic @xmath if @xmath is isomorphic to
@xmath , and @xmath otherwise.

∎